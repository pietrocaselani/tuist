import Foundation

public enum AutogenerationOptions: Hashable {
    /// Contains options for test options within autogenerated targets
    public struct TestingOptions: Codable, Hashable {
        public struct TargetGroupSuffixes: Codable, Hashable {
            /// The suffixes of targets to be added to the build action
            public let build: Set<String>
            /// The suffixes of targets to be added to the test action
            public let test: Set<String>
            /// The suffixes of targets to be added to the run action
            public let run: Set<String>

            /// Memberwise initializer
            public init(build: Set<String>, test: Set<String>, run: Set<String>) {
                self.build = build
                self.test = test
                self.run = run
            }
        }

        /// Run tests on multiple destinations in parallel
        public let parallelizable: Bool

        /// Execute tests in random order
        public let randomExecutionOrdering: Bool

        /// Defines the suffix of the targets to be grouped in the same scheme.
        /// For example, using default values, `Feature`, `FeatureInterface`, `FeatureTests`, and `FeatureDemo` would go to the same scheme
        public let targetGroupSuffixes: TargetGroupSuffixes


        /// Memberwise initializer
        public init(parallelizable: Bool, randomExecutionOrdering: Bool, targetGroupSuffixes: TargetGroupSuffixes) {
            self.parallelizable = parallelizable
            self.randomExecutionOrdering = randomExecutionOrdering
            self.targetGroupSuffixes = targetGroupSuffixes
        }

        /// Default testing options
        public static let `default`: Self = .init(
            parallelizable: false,
            randomExecutionOrdering: false,
            targetGroupSuffixes: .init(
                build: ["Implementation", "Interface", "Mocks", "Testing"],
                test: ["Tests", "UITests"],
                run: ["App", "Demo"]
            )
        )
    }

    case disabled
    case enabled(TestingOptions)
}
